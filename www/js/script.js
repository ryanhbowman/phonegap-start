// Generated by CoffeeScript 1.4.0
(function() {
  var App, Area, Banner, Index, Model, Party,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  window.Models = {};

  App = (function() {

    function App() {
      var id, model, overview;
      if (window.location.search.length) {
        id = parseInt((window.location.search.split('='))[1], 10);
      }
      switch (Config.page) {
        case 'County':
        case 'Constituency':
          new Area({
            id: id
          });
          break;
        case 'Party':
          new Party({
            id: id
          });
          break;
        case 'Index':
          new Index;
          break;
        case 'Banner':
          new Banner({
            filename: 'president.json'
          });
          break;
        default:
          model = new Models[Config.page]({
            filename: Config.page.toLowerCase() + '.json'
          });
          overview = new Models.Overview({
            filename: 'overview.json'
          });
      }
    }

    return App;

  })();

  Model = (function(_super) {

    __extends(Model, _super);

    function Model() {
      this.add_seat_style = __bind(this.add_seat_style, this);

      this.populate_template = __bind(this.populate_template, this);

      this.fetched = __bind(this.fetched, this);

      this.initialize = __bind(this.initialize, this);
      return Model.__super__.constructor.apply(this, arguments);
    }

    Model.prototype.initialize = function() {
      return $.when($.get(Config.json_url + this.get('filename'))).then(this.fetched);
    };

    Model.prototype.fetched = function(json) {
      var _this = this;
      _.each(json, function(value, key) {
        return _this.set(key, value);
      });
      return this.init();
    };

    Model.prototype.populate_template = function(template, items) {
      var _this = this;
      _.each(items, function(text, el) {
        return template.find('.' + el).text(text);
      });
      return template;
    };

    Model.prototype.add_seat_style = function(template, items) {
      var _this = this;
      _.each(items, function(text, el) {
        return template.append(text);
      });
      return template;
    };

    return Model;

  })(Backbone.Model);

  Models.President = (function(_super) {

    __extends(President, _super);

    function President() {
      this.add_county_bar = __bind(this.add_county_bar, this);

      this.get_winning_counties_count = __bind(this.get_winning_counties_count, this);

      this.list = __bind(this.list, this);

      this.map3 = __bind(this.map3, this);

      this.top3 = __bind(this.top3, this);

      this.init = __bind(this.init, this);
      return President.__super__.constructor.apply(this, arguments);
    }

    President.prototype.init = function() {
      this.top3();
      this.map3();
      return this.list();
    };

    President.prototype.top3 = function() {
      var c, constituencies_reporting, i, items, national_total_votes, percentage, populated, template, winning_counties, _i, _len, _ref, _results;
      national_total_votes = this.get('national').total_votes_cast;
      constituencies_reporting = this.get('national').total_constituencies_reporting;
      $('.pres-total-votes-no').text(accounting.formatNumber(national_total_votes));
      $('.percent-reporting').text(accounting.formatNumber((constituencies_reporting / 290) * 100, 1) + '%');
      _ref = this.get('national').candidates;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (i < 3) {
          template = $('#president_templates .template_president_top3').clone();
          template.addClass(c.COALITION_NAME !== '' ? c.COALITION_NAME : c.PARTY_INITIALS);
          percentage = accounting.formatNumber(c.NATIONAL_PERCENTAGE, 1) + '%';
          winning_counties = this.get_winning_counties_count(c.PRESIDENT_ID);
          template.find('.bar-gain-left').css({
            width: percentage
          });
          template.find('.top3-cand-pic').attr({
            'src': Config.image_url + '/candidates/' + c.SMALL_IMAGE
          });
          items = {
            'top3-cand-name': c.FIRST_NAME + ' ' + c.LAST_NAME,
            'top3-cand-party': c.COALITION_NAME !== '' ? c.COALITION_NAME : c.PARTY_INITIALS,
            'top3-cand-stats-counties': winning_counties + ' ' + (winning_counties === 1 ? 'county' : 'counties'),
            'top3-cand-votes-left': accounting.formatNumber(c.CANDIDATE_VOTES) + ' votes',
            'top3-stats-perc-left': percentage,
            'top3-stats-perc-right': winning_counties
          };
          this.add_county_bar(template.find('.bar-squares'), winning_counties);
          populated = this.populate_template(template, items);
          _results.push($('ul#top3').append(populated));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    President.prototype.map3 = function() {
      var c, constituencies_reporting, i, items, populated, template, _i, _len, _ref, _results;
      constituencies_reporting = this.get('national').total_constituencies_reporting;
      $('.reporting').text(accounting.formatNumber((constituencies_reporting / 290) * 100, 1) + '%');
      _ref = this.get('national').candidates;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        template = $('#president_templates .template_president_map_top3 li').clone();
        template.addClass(c.COALITION_NAME !== '' ? c.COALITION_NAME : c.PARTY_INITIALS);
        items = {
          'cand': c.PARTY_INITIALS
        };
        populated = this.add_seat_style(template, items);
        _results.push($('ul#map-top3').prepend(populated));
      }
      return _results;
    };

    President.prototype.list = function() {
      var c, i, items, populated, template, _i, _len, _ref, _results;
      _ref = this.get('national').candidates;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        template = $('<tr align="left"><td class="candidate"></td><td class="party"></td><td class="votes"></td><td class="pct"</td></tr>');
        items = {
          'candidate': c.FIRST_NAME + ' ' + c.LAST_NAME,
          'party': c.COALITION_NAME !== '' ? c.COALITION_NAME : c.PARTY_INITIALS,
          'votes': accounting.formatNumber(c.CANDIDATE_VOTES) + ' votes',
          'pct': accounting.formatNumber(c.NATIONAL_PERCENTAGE, 1) + '%'
        };
        populated = this.populate_template(template, items);
        _results.push($('table#president-list tbody').append(populated));
      }
      return _results;
    };

    President.prototype.get_winning_counties_count = function(candidate_id) {
      var total, winning,
        _this = this;
      winning = _.filter(this.get('county').candidates, function(candidate) {
        return candidate.PRESIDENT_ID === candidate_id && candidate.WINNING === true;
      });
      total = winning.length;
      console.log(total);
      return total;
    };

    President.prototype.add_county_bar = function(el, winning_counties) {
      var clone, coloured_squares, counties, half, i, squares, _i, _results;
      counties = 47;
      squares = Math.floor(counties / 2);
      coloured_squares = Math.floor(winning_counties / 2);
      half = winning_counties % 2;
      _results = [];
      for (i = _i = 0; 0 <= squares ? _i <= squares : _i >= squares; i = 0 <= squares ? ++_i : --_i) {
        clone = $('#president_templates .template_president_top3_bar span').clone();
        if (i < coloured_squares && half === 1) {
          el.append(clone.addClass('pres-bar-gain-actual'));
        } else {
          el.append(clone);
        }
        if (half !== 0 && i === coloured_squares) {
          el.append(clone.addClass('pres-bar-gain-actual half'));
          _results.push(half = 0);
        } else {
          _results.push(el.append(clone));
        }
      }
      return _results;
    };

    return President;

  })(Model);

  Models.Senate = (function(_super) {

    __extends(Senate, _super);

    function Senate() {
      this.map3 = __bind(this.map3, this);

      this.top3 = __bind(this.top3, this);

      this.init = __bind(this.init, this);
      return Senate.__super__.constructor.apply(this, arguments);
    }

    Senate.prototype.init = function() {
      this.top3();
      return this.map3();
    };

    Senate.prototype.top3 = function() {
      var c, counties_reporting, i, items, percentage, populated, template, _i, _len, _ref, _results;
      counties_reporting = this.get('total').total_counties_reporting;
      $('.race-info-gen').text(counties_reporting + (counties_reporting === 1 ? ' County' : ' Counties') + ' Reporting');
      _ref = this.get('county').parties;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (i < 3) {
          template = $('#senate_templates .template_senate_top3').clone();
          template.addClass(c.PARTY_INITIALS);
          percentage = accounting.formatNumber(c.COUNTY_PERCENTAGE, 1) + '%';
          template.find('.bar-gain-actual').css({
            width: percentage
          });
          template.find('.top3-cand-pic').attr({
            'src': Config.image_url + '/parties/' + c.PARTY_SYMBOL
          });
          items = {
            'top3-cand-name': c.PARTY_INITIALS,
            'top3-cand-stats-counties': c.TOTAL_COUNTIES_WON + (c.TOTAL_COUNTIES_WON > 1 ? ' Counties ' : ' County') + ' won',
            'top3-cand-stats-perc': c.TOTAL_COUNTIES_WON,
            'top3-cand-stats-votes': accounting.formatNumber(c.COUNTY_PERCENTAGE, 1) > 50 ? ' House Majority' : void 0
          };
          populated = this.populate_template(template, items);
          _results.push($('ul#top3').append(populated));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Senate.prototype.map3 = function() {
      var c, i, items, percentage, populated, template, _i, _len, _ref, _results;
      _ref = this.get('county').parties;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        template = $('#senate_templates .template_senate_map_parties li').clone();
        template.addClass(c.PARTY_INITIALS);
        items = {
          'cand': c.PARTY_INITIALS
        };
        populated = this.add_seat_style(template, items);
        $('ul#map-parties').prepend(populated);
        if (i < 3) {
          template = $('#senate_templates .template_senate_map3').clone();
          template.addClass(c.PARTY_INITIALS);
          percentage = accounting.formatNumber(c.COUNTY_PERCENTAGE, 1) + '%';
          template.find('.bar-gain-actual').css({
            width: percentage,
            'background-color': c.COLOURCODES
          });
          template.find('.top3-cand-pic').attr({
            'src': Config.image_url + '/parties/' + c.PARTY_SYMBOL
          });
          items = {
            'party-name': c.PARTY_INITIALS,
            'left': c.TOTAL_COUNTIES_WON + (c.TOTAL_COUNTIES_WON > 1 ? ' Counties ' : ' County') + ' won',
            'percentage-big': c.TOTAL_COUNTIES_WON
          };
          populated = this.populate_template(template, items);
          _results.push($('article#map3').append(populated));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Senate;

  })(Model);

  Models.Governor = (function(_super) {

    __extends(Governor, _super);

    function Governor() {
      this.add_candidates = __bind(this.add_candidates, this);

      this.sort_by_county = __bind(this.sort_by_county, this);

      this.all_counties = __bind(this.all_counties, this);

      this.map3 = __bind(this.map3, this);

      this.top3 = __bind(this.top3, this);

      this.init = __bind(this.init, this);
      return Governor.__super__.constructor.apply(this, arguments);
    }

    Governor.prototype.init = function() {
      this.top3();
      this.map3();
      return this.all_counties();
    };

    Governor.prototype.top3 = function() {
      var c, counties_reporting, i, items, percentage, populated, template, _i, _len, _ref, _results;
      counties_reporting = this.get('total').total_counties_reporting;
      $('.race-info-gen').text(counties_reporting + (counties_reporting === 1 ? ' County' : ' Counties') + ' Reporting');
      _ref = this.get('county').parties;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (i < 3) {
          template = $('#governor_templates .template_governor_top3').clone();
          template.addClass(c.PARTY_INITIALS);
          percentage = accounting.formatNumber(c.COUNTY_PERCENTAGE, 1) + '%';
          template.find('.bar-gain-actual').css({
            width: percentage
          });
          template.find('.top3-cand-pic').attr({
            'src': Config.image_url + '/parties/' + c.PARTY_SYMBOL
          });
          items = {
            'top3-cand-name': c.PARTY_INITIALS,
            'top3-cand-stats-counties': c.TOTAL_COUNTIES_WON + (c.TOTAL_COUNTIES_WON > 1 ? ' Counties ' : ' County') + ' won',
            'top3-cand-stats-perc': c.TOTAL_COUNTIES_WON
          };
          populated = this.populate_template(template, items);
          _results.push($('ul#top3').append(populated));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Governor.prototype.map3 = function() {
      var c, i, items, percentage, populated, template, _i, _len, _ref, _results;
      _ref = this.get('county').parties;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        template = $('#governor_templates .template_governor_map_parties li').clone();
        template.addClass(c.PARTY_INITIALS);
        items = {
          'cand': c.PARTY_INITIALS
        };
        populated = this.add_seat_style(template, items);
        $('ul#map-parties').prepend(populated);
        if (i < 3) {
          template = $('#governor_templates .template_governor_map3').clone();
          template.addClass(c.PARTY_INITIALS);
          percentage = accounting.formatNumber(c.COUNTY_PERCENTAGE, 1) + '%';
          template.find('.bar-gain-actual').css({
            width: percentage
          });
          console.log(Config.image_url + '/parties/' + c.PARTY_SYMBOL);
          template.find('.top3-cand-pic').attr({
            'src': Config.image_url + '/parties/' + c.PARTY_SYMBOL
          });
          items = {
            'party-name': c.PARTY_INITIALS,
            'left': c.TOTAL_COUNTIES_WON + (c.TOTAL_COUNTIES_WON > 1 ? ' Counties ' : ' County') + ' won',
            'percentage-big': c.TOTAL_COUNTIES_WON
          };
          populated = this.populate_template(template, items);
          _results.push($('article#map3').append(populated));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Governor.prototype.all_counties = function() {
      var c, i, items, populated, sorted_candidates, template, _i, _results;
      sorted_candidates = this.sort_by_county(this.get('county').candidates);
      _results = [];
      for (i = _i = 1; _i <= 47; i = ++_i) {
        _results.push((function() {
          var _j, _len, _results1;
          _results1 = [];
          for (_j = 0, _len = sorted_candidates.length; _j < _len; _j++) {
            c = sorted_candidates[_j];
            if (i !== accounting.formatNumber(c.COUNTY_NO)) {
              template = $('#governor_templates .template_governor_counties section').clone();
              items = {
                'candidate': c.FIRST_NAME + ' ' + c.LAST_NAME,
                'party': c.PARTY_INITIALS,
                'votes': accounting.formatNumber(c.CANDIDATE_VOTES) + ' votes',
                'pct': accounting.formatNumber(c.NATIONAL_PERCENTAGE, 1) + '%'
              };
              this.add_candidates(template.find('.candidates-wrapper'), items);
              populated = this.populate_template(template, items);
              _results1.push($('section.county-scroll-list').append(populated));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Governor.prototype.sort_by_county = function(candidates) {
      return _.sortBy(candidates, function(obj) {
        return obj.COUNTY_NO;
      });
    };

    Governor.prototype.add_candidates = function(el, items) {
      var clone;
      clone = $('#governor_templates .template_governor_candidate').clone();
      return el.append(clone);
    };

    return Governor;

  })(Model);

  Models.National = (function(_super) {

    __extends(National, _super);

    function National() {
      this.init = __bind(this.init, this);
      return National.__super__.constructor.apply(this, arguments);
    }

    National.prototype.init = function() {};

    return National;

  })(Model);

  Models.Overview = (function(_super) {

    __extends(Overview, _super);

    function Overview() {
      this.party_color = __bind(this.party_color, this);

      this.add_seats_mobile = __bind(this.add_seats_mobile, this);

      this.add_seats = __bind(this.add_seats, this);

      this.sort_by_seats_won = __bind(this.sort_by_seats_won, this);

      this.sort_parties = __bind(this.sort_parties, this);

      this.seats_mobile = __bind(this.seats_mobile, this);

      this.seats = __bind(this.seats, this);

      this.gender_overview = __bind(this.gender_overview, this);

      this.build = __bind(this.build, this);

      this.build_mobile = __bind(this.build_mobile, this);

      this.map3 = __bind(this.map3, this);

      this.top3 = __bind(this.top3, this);

      this.build_seats = __bind(this.build_seats, this);

      this.init = __bind(this.init, this);
      return Overview.__super__.constructor.apply(this, arguments);
    }

    Overview.prototype.init = function() {
      this.top3();
      this.map3();
      return this.build_seats();
    };

    Overview.prototype.build_seats = function() {
      if (Config.version.toLowerCase() === 'desktop') {
        this.build('senate');
        return this.build('national');
      } else {
        return this.build_mobile(Config.page.toLowerCase());
      }
    };

    Overview.prototype.top3 = function() {
      var c, i, initials, items, no_seats, percentage, populated, seats_announced, template, _i, _len, _ref, _results;
      seats_announced = this.get('national').women_total_reported_seats + this.get('national').men_total_reported_seats;
      $('.seats-announced').text(seats_announced + (seats_announced === 1 ? ' Seat' : ' Seats') + ' Announced');
      _ref = this.sort_parties(this.get('national').seats.party);
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        template = $('#national_templates .template_national_top3').clone();
        initials = c[0];
        template.addClass(initials);
        no_seats = 337;
        percentage = accounting.formatNumber((c[1] / no_seats) * 100, 1) + '%';
        template.find('.bar-gain-actual').css({
          width: percentage
        });
        template.find('.top3-cand-pic').attr({
          'src': Config.image_url + '/parties/' + (initials.toLowerCase().replace(/^\s+|\s+$/g, "")) + '.jpg'
        });
        template.addClass(initials.toLowerCase());
        items = {
          'top3-cand-name': c[0],
          'top3-cand-stats-counties': c[1] + (c[1] > 1 ? ' Seats ' : ' Seat') + ' won',
          'top3-cand-stats-perc': percentage,
          'top3-cand-stats-votes': accounting.formatNumber((c[1] / no_seats) * 100, 1) > 50 ? ' House Majority' : void 0
        };
        populated = this.populate_template(template, items);
        _results.push($('ul#top3').append(populated));
      }
      return _results;
    };

    Overview.prototype.map3 = function() {
      var c, i, initials, items, no_seats, percentage, populated, template, _i, _len, _ref, _results;
      _ref = this.sort_parties(this.get('national').seats.party);
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (i < 3) {
          template = $('#national_templates .template_national_map3').clone();
          initials = c[0];
          template.addClass(initials);
          no_seats = 337;
          percentage = percentage = accounting.formatNumber((c[1] / no_seats) * 100, 1) + '%';
          template.find('.bar-gain-actual').css({
            width: percentage
          });
          template.find('.top3-cand-pic').attr({
            'src': Config.image_url + '/parties/' + (initials.toLowerCase().replace(/^\s+|\s+$/g, "")) + '.jpg'
          });
          items = {
            'party-name': c[0],
            'left': c[1] + (c[1] > 1 ? ' Seats ' : ' Seat') + ' won',
            'percentage-big': percentage
          };
          populated = this.populate_template(template, items);
          _results.push($('article#map3').append(populated));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Overview.prototype.build_mobile = function(house) {
      this.gender_overview(house);
      return this.seats_mobile(house);
    };

    Overview.prototype.build = function(house) {
      this.gender_overview(house);
      this.seats(house, 'party');
      return this.seats(house, 'coalition');
    };

    Overview.prototype.gender_overview = function(house) {
      var gender, percentage, _i, _len, _ref, _results;
      percentage = this.get(house).gender_percentages;
      _ref = ['male', 'female'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gender = _ref[_i];
        _results.push($('#gender_perc_' + house + ' .gender_perc_' + gender).css({
          width: percentage[gender] + '%'
        }));
      }
      return _results;
    };

    Overview.prototype.seats = function(house, org_level) {
      var items, org, populated, template, _i, _len, _ref, _results;
      _ref = this.sort_by_seats_won(house, org_level);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        org = _ref[_i];
        template = $('#overview_templates .template_seats_by_org li').clone();
        template.addClass(org.name);
        items = {
          org_name: org.name,
          seat_count: '(' + org.seats + ' seats)'
        };
        this.add_seats(house, template.find('.actual-seats'), org.seats);
        populated = this.populate_template(template, items);
        _results.push($('#' + house + '_seats_by_' + org_level).append(populated));
      }
      return _results;
    };

    Overview.prototype.seats_mobile = function(house) {
      var items, org, org_level, populated, pos, template, _i, _len, _ref, _results;
      org_level = 'party';
      pos = 1;
      _ref = this.sort_by_seats_won(house, org_level);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        org = _ref[_i];
        if (pos <= 3) {
          template = $('#' + house + '_templates .template_nation_seats section').clone();
          template.addClass(org.name);
          items = {
            org_name: org.name,
            seat_count: '(' + org.seats + ' seats)'
          };
          this.add_seats_mobile(house, template.find('.actual-seats'), org.seats);
          populated = this.populate_template(template, items);
          $('#' + house + '-seats-wrapper').append(populated);
          _results.push(pos = pos + 1);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Overview.prototype.sort_parties = function(items) {
      var k, v;
      return ((function() {
        var _results;
        _results = [];
        for (k in items) {
          v = items[k];
          _results.push([k, v]);
        }
        return _results;
      })()).sort(function(a, b) {
        return b[1] - a[1];
      }).slice(0, 3).map(function(n) {
        return n;
      });
    };

    Overview.prototype.sort_by_seats_won = function(house, organisation) {
      var output,
        _this = this;
      output = [];
      _.each(this.get(house).seats[organisation], function(seats, name) {
        return output.push({
          name: name,
          seats: seats
        });
      });
      return (_.sortBy(output, function(item) {
        return item.seats;
      })).reverse();
    };

    Overview.prototype.add_seats = function(house, el, seats) {
      var circles, clone, i, semi, _i;
      if (house === 'national') {
        circles = Math.floor(seats / 4);
        switch (seats % 4) {
          case 1:
            semi = 'quarter-seat';
            break;
          case 2:
            semi = 'half-seat';
            break;
          case 3:
            semi = 'three-quarter-seat';
        }
      } else {
        circles = seats;
      }
      if (circles >= 1) {
        for (i = _i = 1; 1 <= circles ? _i <= circles : _i >= circles; i = 1 <= circles ? ++_i : --_i) {
          clone = $('#overview_templates .template_house_seat').clone();
          el.append(clone);
        }
      }
      if (semi != null) {
        clone = $('#overview_templates .template_house_seat').clone();
        return el.append(clone.find('span').addClass(semi));
      }
    };

    Overview.prototype.add_seats_mobile = function(house, el, seats) {
      var circles, clone, i, semi, _i;
      if (house === 'national') {
        circles = Math.floor(seats / 4);
        switch (seats % 4) {
          case 1:
            semi = 'quarter-seat';
            break;
          case 2:
            semi = 'half-seat';
            break;
          case 3:
            semi = 'three-quarter-seat';
        }
      } else {
        circles = seats;
      }
      if (circles >= 1) {
        for (i = _i = 1; 1 <= circles ? _i <= circles : _i >= circles; i = 1 <= circles ? ++_i : --_i) {
          clone = $('#' + house + '_templates .template_house_seat span').clone();
          el.append(clone);
        }
      }
      if (semi != null) {
        clone = $('#' + house + '_templates .template_house_seat span').clone();
        return el.append(clone.find('span').addClass(semi));
      }
    };

    Overview.prototype.party_color = function(id) {
      var c, i, ret, _i, _len, _ref;
      ret = '';
      _ref = this.sort_parties(this.get('national').seats.party);
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (c[1] === id) {
          ret = c[0];
        }
      }
      return ret;
    };

    return Overview;

  })(Model);

  Area = (function(_super) {

    __extends(Area, _super);

    function Area() {
      this.get_constituencies_from_county = __bind(this.get_constituencies_from_county, this);

      this.get_county_from_constituency = __bind(this.get_county_from_constituency, this);

      this.display_constituency_data = __bind(this.display_constituency_data, this);

      this.display_county_data = __bind(this.display_county_data, this);

      this.populate_template = __bind(this.populate_template, this);

      this.filter_sort_candidates = __bind(this.filter_sort_candidates, this);

      this.build_level = __bind(this.build_level, this);

      this.got_files = __bind(this.got_files, this);

      this.initialize = __bind(this.initialize, this);
      return Area.__super__.constructor.apply(this, arguments);
    }

    Area.prototype.initialize = function() {
      var file, get_files, _i, _len, _ref;
      this.files = ['president', 'governor', 'senate', 'national', 'county', 'constituency'];
      get_files = [];
      _ref = this.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        get_files.push($.get(Config.json_url + file + '.json'));
      }
      return $.when.apply($, get_files).then(this.got_files);
    };

    Area.prototype.got_files = function() {
      var ajax, filename, i, _i, _j, _len, _len1, _ref, _ref1, _results;
      ajax = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = this.files;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        filename = _ref[i];
        this.set(filename, ajax[i][0]);
      }
      _ref1 = this.files;
      _results = [];
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        filename = _ref1[i];
        switch (filename) {
          case 'county':
            _results.push(this.display_county_data());
            break;
          case 'constituency':
            _results.push(this.display_constituency_data());
            break;
          default:
            _results.push(this.build_level(filename));
        }
      }
      return _results;
    };

    Area.prototype.build_level = function(filename) {
      var c, candidates, items, key, percentage, populated, template, _i, _len, _results;
      key = Config.page === 'County' && filename === 'national' ? 'women_mps' : 'candidates';
      candidates = this.filter_sort_candidates(this.get(filename)[Config.page.toLowerCase()][key]);
      _results = [];
      for (_i = 0, _len = candidates.length; _i < _len; _i++) {
        c = candidates[_i];
        template = $('#' + Config.page.toLowerCase() + '_templates .template_area_candidate').children().clone(true, true);
        percentage = accounting.formatNumber(c[Config.page.toUpperCase() + '_PERCENTAGE'], 1) + '%';
        template.find('.bar-gain-actual').css({
          width: percentage
        });
        items = {
          'results-cand': c.LAST_NAME,
          'results-party': c.PARTY_INITIALS,
          'results-votes': accounting.formatNumber(c.CANDIDATE_VOTES),
          'results-perc-value': percentage
        };
        populated = this.populate_template(template, items);
        _results.push($('#' + Config.page.toLowerCase() + '_' + filename + '_table tbody').append(populated));
      }
      return _results;
    };

    Area.prototype.filter_sort_candidates = function(candidates) {
      var area, sorted,
        _this = this;
      area = _.filter(candidates, function(candidate) {
        return parseInt(candidate[Config.page.toUpperCase() + '_NO'], 10) === _this.get('id');
      });
      return sorted = (_.sortBy(area, function(candidate) {
        return candidate.CANDIDATE_VOTES;
      })).reverse();
    };

    Area.prototype.populate_template = function(template, items) {
      var _this = this;
      _.each(items, function(text, el) {
        return template.find('.' + el).text(text);
      });
      return template;
    };

    Area.prototype.display_county_data = function() {
      var county, id,
        _this = this;
      id = Config.page === 'County' ? this.get('id') : this.get_county_from_constituency(this.get('id'));
      county = (_.filter(this.get('county'), function(county) {
        return parseInt(county.COUNTY_NO, 10) === id;
      }))[0];
      if (Config.page === 'County') {
        $('#county_name').text(county.COUNTY_NAME);
      }
      $('#county_population').text(accounting.formatNumber(county.COUNTY_POPULATION));
      $('#county_pop_density').text(accounting.formatNumber(county.COUNTY_POPULATION / county.AREA_SQ_KM));
      $('#county_reg_voters').text(accounting.formatNumber(county.REG_VOTERS));
      return $('#county_area').text(accounting.formatNumber(county.AREA_SQ_KM));
    };

    Area.prototype.display_constituency_data = function() {
      var c, constituencies, constituency, _i, _len, _results,
        _this = this;
      if (Config.page === 'County') {
        constituencies = this.get_constituencies_from_county(this.get('id'));
        _results = [];
        for (_i = 0, _len = constituencies.length; _i < _len; _i++) {
          c = constituencies[_i];
          _results.push($('#county_constituencies').append('<li><a href="/constituency.html?constituency=' + c.CONSTITUENCY_NO + '">' + c.CONSTITUENCY_NAME + '</a></li>'));
        }
        return _results;
      } else {
        constituency = (_.filter(this.get('constituency'), function(constituency) {
          return parseInt(constituency.CONSTITUENCY_NO, 10) === _this.get('id');
        }))[0];
        return $('#constituency_name').text(constituency.CONSTITUENCY_NAME);
      }
    };

    Area.prototype.get_county_from_constituency = function(constituency_id) {
      var constituencies, filtered,
        _this = this;
      constituencies = this.get('constituency');
      filtered = _.filter(constituencies, function(constituency) {
        return parseInt(constituency.CONSTITUENCY_NO, 10) === constituency_id;
      });
      return parseInt(filtered[0].COUNTY_NO, 10);
    };

    Area.prototype.get_constituencies_from_county = function(county_id) {
      var constituencies, filtered,
        _this = this;
      constituencies = this.get('constituency');
      return filtered = _.filter(constituencies, function(constituency) {
        return parseInt(constituency.COUNTY_NO, 10) === county_id;
      });
    };

    return Area;

  })(Backbone.Model);

  Party = (function(_super) {

    __extends(Party, _super);

    function Party() {
      this.get_party_initials = __bind(this.get_party_initials, this);

      this.get_seat_from_area_id = __bind(this.get_seat_from_area_id, this);

      this.filter_winners = __bind(this.filter_winners, this);

      this.filter_party = __bind(this.filter_party, this);

      this.national_summary = __bind(this.national_summary, this);

      this.party_details = __bind(this.party_details, this);

      this.president_summary = __bind(this.president_summary, this);

      this.build_summary = __bind(this.build_summary, this);

      this.got_files = __bind(this.got_files, this);

      this.initialize = __bind(this.initialize, this);
      return Party.__super__.constructor.apply(this, arguments);
    }

    Party.prototype.initialize = function() {
      var file, get_files, _i, _len, _ref;
      this.files = ['president', 'governor', 'senate', 'national', 'party', 'county', 'constituency'];
      get_files = [];
      _ref = this.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        get_files.push($.get(Config.json_url + file + '.json'));
      }
      return $.when.apply($, get_files).then(this.got_files);
    };

    Party.prototype.got_files = function() {
      var ajax, filename, i, _i, _j, _len, _len1, _ref, _ref1, _results;
      ajax = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = this.files;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        filename = _ref[i];
        this.set(filename, ajax[i][0]);
      }
      _ref1 = this.files;
      _results = [];
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        filename = _ref1[i];
        switch (filename) {
          case 'president':
            _results.push(this.president_summary());
            break;
          case 'governor':
          case 'senate':
            _results.push(this.build_summary(filename));
            break;
          case 'national':
            _results.push(this.national_summary());
            break;
          case 'party':
            _results.push(this.party_details());
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    Party.prototype.build_summary = function(filename) {
      var c, parties, party_winning_candidates, percentage, seats_won, sorted, this_party, winner, winners, winning_candidates, _i, _j, _len, _len1,
        _this = this;
      parties = this.get(filename).county.parties;
      this_party = this.filter_party(parties);
      if (this_party.length) {
        winning_candidates = this.filter_winners('county', this.get(filename).county.candidates);
        party_winning_candidates = this.filter_party(winning_candidates);
        seats_won = this_party[0].TOTAL_COUNTIES_WON;
        percentage = accounting.formatNumber(this_party[0].COUNTY_PERCENTAGE, 1) + '%';
        winners = [];
        for (_i = 0, _len = party_winning_candidates.length; _i < _len; _i++) {
          c = party_winning_candidates[_i];
          winners.push({
            name: c.FIRST_NAME + ' ' + c.LAST_NAME,
            seat: this.get_seat_from_area_id('county', parseInt(c.COUNTY_NO, 10))
          });
        }
        sorted = _.sortBy(winners, function(winner) {
          return winner.seat;
        });
        for (_j = 0, _len1 = sorted.length; _j < _len1; _j++) {
          winner = sorted[_j];
          $('#party_' + filename + '_winners').append('<tr><td class="results-cand">' + winner.seat + '</td><td class="results-party">' + winner.name + '</td></tr>');
        }
      } else {
        seats_won = 0;
        percentage = '0%';
        $('#party_' + filename + '_winners').hide();
      }
      $('#party_' + filename + '_seats').text(seats_won);
      if (filename === 'senate') {
        $('#party_senate_perc').text(percentage);
        return $('#party_senate_bar').css({
          width: percentage
        });
      }
    };

    Party.prototype.president_summary = function() {
      var candidates, percentage, president, this_party;
      candidates = this.get('president').national.candidates;
      this_party = this.filter_party(candidates);
      if (this_party.length) {
        president = this_party[0];
        percentage = accounting.formatNumber(president.NATIONAL_PERCENTAGE, 1) + '%';
        $('#party_pres_candidate .top3-cand-name').text(president.FIRST_NAME + president.LAST_NAME);
        $('#party_pres_candidate .top3-cand-stats-votes').text(accounting.formatNumber(president.CANDIDATE_VOTES) + ' votes');
        $('#party_pres_candidate .top3-cand-stats-perc').text(percentage);
        $('#party_pres_candidate .bar-gain-actual').css({
          width: percentage
        });
        return $('#party_pres_candidate').show();
      }
    };

    Party.prototype.party_details = function() {
      var party;
      party = this.filter_party(this.get('party'))[0];
      $('#party_name').text(party.PARTY_NAME);
      return $('#party_logo').css({
        background: 'url(/images/parties/' + this.get('id') + '.jpg) no-repeat center center'
      });
    };

    Party.prototype.national_summary = function() {
      var mp, party_mp_winners, party_women_mp_winners, percentage, sorted, total_seats, winner, winners, winning_mps, winning_women_mps, _i, _j, _k, _len, _len1, _len2, _results,
        _this = this;
      winning_mps = this.filter_winners('constituency', this.get('national').constituency.candidates);
      winning_women_mps = this.filter_winners('county', this.get('national').county.women_mps);
      party_mp_winners = this.filter_party(winning_mps);
      party_women_mp_winners = this.filter_party(winning_women_mps);
      total_seats = party_mp_winners.length + party_women_mp_winners.length;
      percentage = accounting.formatNumber((100 / 337) * total_seats, 1) + '%';
      $('#party_national_seats').text(total_seats);
      $('#party_national_perc').text(percentage);
      $('#party_national_bar').css({
        width: percentage
      });
      if (total_seats > 0) {
        winners = [];
        for (_i = 0, _len = party_mp_winners.length; _i < _len; _i++) {
          mp = party_mp_winners[_i];
          winners.push({
            name: mp.FIRST_NAME + ' ' + mp.LAST_NAME,
            seat: this.get_seat_from_area_id('constituency', parseInt(mp.CONSTITUENCY_NO, 10))
          });
        }
        for (_j = 0, _len1 = party_women_mp_winners.length; _j < _len1; _j++) {
          mp = party_women_mp_winners[_j];
          winners.push({
            name: mp.FIRST_NAME + ' ' + mp.LAST_NAME,
            seat: this.get_seat_from_area_id('county', parseInt(mp.COUNTY_NO, 10))
          });
        }
        sorted = _.sortBy(winners, function(winner) {
          return winner.seat;
        });
        _results = [];
        for (_k = 0, _len2 = sorted.length; _k < _len2; _k++) {
          winner = sorted[_k];
          _results.push($('#party_national_winners').append('<tr><td class="results-cand">' + winner.seat + '</td><td class="results-party">' + winner.name + '</td></tr>'));
        }
        return _results;
      } else {
        return $('#party_national_winners').hide();
      }
    };

    Party.prototype.filter_party = function(items) {
      var filtered,
        _this = this;
      if (items[0].PARTY_ID) {
        filtered = _.filter(items, function(item) {
          return parseInt(item.PARTY_ID, 10) === _this.get('id');
        });
      } else {
        filtered = _.filter(items, function(item) {
          return item.PARTY_INITIALS === _this.get_party_initials();
        });
      }
      return filtered;
    };

    Party.prototype.filter_winners = function(level, candidates) {
      var area_id, grouped, winners,
        _this = this;
      grouped = _.groupBy(candidates, function(candidate) {
        return candidate[level.toUpperCase() + '_NO'];
      });
      winners = [];
      for (area_id in grouped) {
        candidates = grouped[area_id];
        winners.push(_.max(candidates, function(candidate) {
          return candidate.CANDIDATE_VOTES;
        }));
      }
      return winners;
    };

    Party.prototype.get_seat_from_area_id = function(level, id) {
      var _this = this;
      return (_.filter(this.get(level), function(item) {
        return parseInt(item[level.toUpperCase() + '_NO'], 10) === id;
      }))[0][level.toUpperCase() + '_NAME'];
    };

    Party.prototype.get_party_initials = function() {
      var _this = this;
      return (_.filter(this.get('party'), function(party) {
        return party.PARTY_ID === _this.get('id');
      }))[0].PARTY_INITIALS;
    };

    return Party;

  })(Backbone.Model);

  Index = (function(_super) {

    __extends(Index, _super);

    function Index() {
      this.add_seats_mobile = __bind(this.add_seats_mobile, this);

      this.sort_by_seats_won = __bind(this.sort_by_seats_won, this);

      this.sort_parties = __bind(this.sort_parties, this);

      this.build_level_seats = __bind(this.build_level_seats, this);

      this.populate_template = __bind(this.populate_template, this);

      this.get_winning_counties_count = __bind(this.get_winning_counties_count, this);

      this.build_seats = __bind(this.build_seats, this);

      this.governor_top3 = __bind(this.governor_top3, this);

      this.president_top3 = __bind(this.president_top3, this);

      this.got_files = __bind(this.got_files, this);

      this.initialize = __bind(this.initialize, this);
      return Index.__super__.constructor.apply(this, arguments);
    }

    Index.prototype.initialize = function() {
      var file, get_files, _i, _len, _ref;
      this.files = ['president', 'governor', 'overview', 'senate', 'national'];
      get_files = [];
      _ref = this.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        get_files.push($.get(Config.json_url + file + '.json'));
      }
      return $.when.apply($, get_files).then(this.got_files);
    };

    Index.prototype.got_files = function() {
      var ajax, filename, i, _i, _j, _len, _len1, _ref, _ref1, _results;
      ajax = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = this.files;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        filename = _ref[i];
        this.set(filename, ajax[i][0]);
      }
      _ref1 = this.files;
      _results = [];
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        filename = _ref1[i];
        switch (filename) {
          case 'president':
            _results.push(this.president_top3(filename));
            break;
          case 'governor':
            _results.push(this.governor_top3(filename));
            break;
          case 'overview':
            _results.push(this.build_seats(filename));
            break;
          case 'senate':
            _results.push(this.write_reporting(filename, 'senate'));
            break;
          case 'national':
            _results.push(this.write_reporting(filename, 'national'));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    Index.prototype.president_top3 = function(filename) {
      var c, constituencies_reporting, i, items, percentage, populated, template, winning_counties, _i, _len, _ref, _results;
      constituencies_reporting = this.get('national').total_constituencies_reporting;
      $('.pres-reporting-perc').text(accounting.formatNumber((constituencies_reporting / 290) * 100, 1) + '%');
      _ref = this.get(filename).national.candidates;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (i < 3) {
          template = $('#index_templates .template_candidates_top3 section').clone();
          template.addClass(c.COALITION_NAME !== '' ? c.COALITION_NAME : c.PARTY_INITIALS);
          percentage = accounting.formatNumber(c.NATIONAL_PERCENTAGE, 1) + '%';
          winning_counties = this.get_winning_counties_count(filename, c.PRESIDENT_ID);
          template.find('.bar-gain-actual').css({
            width: percentage
          });
          template.find('.cand-image').attr({
            'src': Config.image_url + '/candidates/' + c.SMALL_IMAGE
          });
          items = {
            'cand-name': c.FIRST_NAME + ' ' + c.LAST_NAME,
            'counties-won': winning_counties + ' ' + (winning_counties === 1 ? 'county ' : 'counties ' + 'won'),
            'no-votes': accounting.formatNumber(c.CANDIDATE_VOTES) + ' votes',
            'percentage-big': percentage
          };
          populated = this.populate_template(template, items);
          _results.push($('article#president-data').append(populated));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Index.prototype.governor_top3 = function(filename) {
      var c, counties_reporting, i, items, percentage, populated, template, winning_counties, _i, _len, _ref, _results;
      counties_reporting = this.get('total').total_counties_reporting;
      $('.gov-reporting-perc').text(accounting.formatNumber((counties_reporting / 47) * 100, 1) + '%');
      _ref = this.get(filename).county.parties;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (i < 3) {
          template = $('#index_templates .template_candidates_top3 section').clone();
          template.addClass(c.PARTY_INITIALS);
          percentage = accounting.formatNumber(c.COUNTY_PERCENTAGE, 1) + '%';
          winning_counties = c.TOTAL_COUNTIES_WON;
          template.find('.bar-gain-actual').css({
            width: percentage
          });
          template.find('.cand-image').attr({
            'src': Config.image_url + '/parties/' + c.PARTY_SYMBOL
          });
          items = {
            'cand-name': c.PARTY_INITIALS,
            'counties-won': winning_counties + ' ' + (winning_counties === 1 ? 'county ' : 'counties ' + 'won'),
            'percentage-big': winning_counties
          };
          populated = this.populate_template(template, items);
          _results.push($('article#governor-data').append(populated));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Index.prototype.build_seats = function(filename) {
      this.build_level_seats(filename, 'senate');
      return this.build_level_seats(filename, 'national');
    };

    Index.prototype.get_winning_counties_count = function(filename, candidate_id) {
      var total, winning,
        _this = this;
      winning = _.filter(this.get(filename).county.candidates, function(candidate) {
        return candidate.PRESIDENT_ID === candidate_id && candidate.WINNING === true;
      });
      total = winning.length;
      return total;
    };

    Index.prototype.populate_template = function(template, items) {
      var _this = this;
      _.each(items, function(text, el) {
        return template.find('.' + el).text(text);
      });
      return template;
    };

    Index.prototype.build_level_seats = function(filename, house) {
      var items, org, org_level, populated, pos, template, _i, _len, _ref, _results;
      org_level = 'party';
      pos = 1;
      _ref = this.sort_by_seats_won(filename, house);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        org = _ref[_i];
        if (pos <= 3) {
          template = $('#index_templates .template_seats section').clone();
          template.addClass(org.name);
          items = {
            org_name: org.name,
            seat_count: '(' + org.seats + ' seats)'
          };
          this.add_seats_mobile(house, template.find('.actual-seats'), org.seats);
          populated = this.populate_template(template, items);
          $('#' + house + '-data').append(populated);
          _results.push(pos = pos + 1);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Index.prototype.sort_parties = function(items) {
      var k, v;
      return ((function() {
        var _results;
        _results = [];
        for (k in items) {
          v = items[k];
          _results.push([k, v]);
        }
        return _results;
      })()).sort(function(a, b) {
        return b[1] - a[1];
      }).slice(0, 3).map(function(n) {
        return n;
      });
    };

    Index.prototype.sort_by_seats_won = function(filename, house) {
      var items, output,
        _this = this;
      items = house === 'senate' ? this.get(filename).senate.seats.party : this.get(filename).national.seats.party;
      output = [];
      _.each(items, function(seats, name) {
        return output.push({
          name: name,
          seats: seats
        });
      });
      return (_.sortBy(output, function(item) {
        return item.seats;
      })).reverse();
    };

    Index.prototype.add_seats_mobile = function(house, el, seats) {
      var circles, clone, i, semi, _i;
      if (house === 'national') {
        circles = Math.floor(seats / 4);
        switch (seats % 4) {
          case 1:
            semi = 'quarter-seat';
            break;
          case 2:
            semi = 'half-seat';
            break;
          case 3:
            semi = 'three-quarter-seat';
        }
      } else {
        circles = seats;
      }
      if (circles >= 1) {
        for (i = _i = 1; 1 <= circles ? _i <= circles : _i >= circles; i = 1 <= circles ? ++_i : --_i) {
          clone = $('#index_templates .template_house_seat span').clone();
          el.append(clone);
        }
      }
      if (semi != null) {
        clone = $('#index_templates .template_house_seat span').clone();
        return el.append(clone.find('span').addClass(semi));
      }
    };

    return Index;

  })(Backbone.Model);

  Banner = (function(_super) {

    __extends(Banner, _super);

    function Banner() {
      this.populate_template = __bind(this.populate_template, this);

      this.president_top3 = __bind(this.president_top3, this);

      this.got_files = __bind(this.got_files, this);

      this.initialize = __bind(this.initialize, this);
      return Banner.__super__.constructor.apply(this, arguments);
    }

    Banner.prototype.initialize = function() {
      var file, get_files, _i, _len, _ref;
      this.files = ['president', 'senate'];
      get_files = [];
      _ref = this.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        get_files.push($.get(Config.json_url + file + '.json'));
      }
      return $.when.apply($, get_files).then(this.got_files);
    };

    Banner.prototype.got_files = function() {
      var ajax, filename, i, _i, _j, _len, _len1, _ref, _ref1, _results;
      ajax = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _ref = this.files;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        filename = _ref[i];
        this.set(filename, ajax[i][0]);
      }
      _ref1 = this.files;
      _results = [];
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        filename = _ref1[i];
        switch (filename) {
          case 'president':
            _results.push(this.president_top3(filename));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    Banner.prototype.president_top3 = function(filename) {
      var c, i, items, percentage, populated, template, _i, _len, _ref, _results;
      _ref = this.get(filename).national.candidates;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        c = _ref[i];
        if (i < 3) {
          template = $('#banner_templates .template_president_top3 li').clone();
          template.addClass(c.COALITION_NAME !== '' ? c.COALITION_NAME : c.PARTY_INITIALS);
          percentage = accounting.formatNumber(c.NATIONAL_PERCENTAGE, 1) + '%';
          template.find('.bar-gain-left').css({
            width: percentage
          });
          template.find('.top3-cand-pic').attr({
            'src': Config.image_url + '/candidates/' + c.SMALL_IMAGE
          });
          items = {
            'top3-cand-name': c.FIRST_NAME + ' ' + c.LAST_NAME,
            'top3-cand-party': c.COALITION_NAME !== '' ? c.COALITION_NAME : c.PARTY_INITIALS,
            'top3-cand-votes-left': accounting.formatNumber(c.CANDIDATE_VOTES) + ' votes',
            'top3-stats-perc-left': percentage
          };
          populated = this.populate_template(template, items);
          _results.push($('ul#top3').append(populated));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Banner.prototype.populate_template = function(template, items) {
      var _this = this;
      _.each(items, function(text, el) {
        return template.find('.' + el).text(text);
      });
      return template;
    };

    return Banner;

  })(Backbone.Model);

  window.App = App;

}).call(this);
